/* Generated By:JavaCC: Do not edit this line. Reader.java */
        package jus.aoo.boole.reader;
        import jus.aoo.boole.circuit.*;
        public class Reader extends ReaderUtilities implements ReaderConstants {
                public _Circuit read() throws Exception {return CIRCUIT();}

  final public int Nombre() throws ParseException, Exception {
  Token t;
    t = jj_consume_token(NUM);
         {if (true) return  Integer.parseInt(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public $Composant TYPE(String type) throws ParseException, Exception {
  $Composant composant;
                switch (type)
                {
                        case "Itr" : composant = ($Composant)new Itr();break;
                        case "Gnd" : composant = ($Composant)new Gnd();break;
                        case "Vcc" : composant = ($Composant)new Vcc();break;
                        case "Led" : composant = ($Composant)new Led();break;
                        case "Et" : composant = ($Composant)new Et();break;
                        case "Ou" : composant = ($Composant)new Ou();break;
                        case "Non" : composant = ($Composant)new Non();break;
                        case "Oux" : composant = ($Composant)new Oux();break;
                        {if (true) return composant;}
                }
    throw new Error("Missing return statement in function");
  }

/**CircuitFerme*/
  final public _Circuit CIRCUIT() throws ParseException, Exception {
  /**CircuitFerme circuit*/
        $Composant compo;
        Ciruit circuit;
        int indice;
        int i;
        TreeMap <Integer,TreeMap<Integer,Integer>> sortie;
        TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> listeConnexion;
        String type;
                 sortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
                circuit = new Circuit();
    jj_consume_token(ID);
    jj_consume_token(P_OUVERT);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case P_OUVERT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      if (jj_2_1(3)) {
        compo = COMPOSANT(indice,sortie);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case P_OUVERT:
          compo = COMPOSITE(indice,type, sortie);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                          listeConnexion.put(indice, sortie);
                        circuit.add(compo);
    }
    jj_consume_token(P_FERME);
                        //Lier les coposant entre eux
                        //Pour chaque composant
                        for(i = 0; i <listeConnexion.size(); i++)
                        {
                                //Obtenir liste des connexion sortie
                                connexionSortie = listeConnexion.get(i);
                                //Pour chaque port de sortie
                                for(Map.Entry<Integer,TreeMap<Integer,Integer>> entry : connexionSortie.entrySet())
                                {
                                        //entry.getKey() = numPort de sortie
                                        for(Map.Entry<Integer,Integer> entry2 : entry.getValue().entrySet())
                                        { //entry2.getKey() = compoENtre, entry2.getValues() = portEntre
                                          circuit.connecter(i,entry.getKey(),entry2.getKey(),entry2.getValues());
                                        }
                                }
                        }
                        {if (true) return circuit;}
    throw new Error("Missing return statement in function");
  }

  final public $Composant COMPOSANT(int indice,TreeMap <Integer,TreeMap<Integer,Integer>> sortie) throws ParseException, Exception {
        int nb_sorties;
        int nb_entrees;
        int port;
        String facultatif;
        String type;
        TreeMap <Integer,Integer> liste;
        $Composant compo;
    jj_consume_token(P_OUVERT);
    indice = Nombre();
    jj_consume_token(SEPARATEUR);
    type = jj_consume_token(ID);
    compo = TYPE(type);
    jj_consume_token(P_OUVERT);
    nb_entrees = Nombre();
    jj_consume_token(SEPARATEUR);
    nb_sorties = Nombre();
    jj_consume_token(P_FERME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P_OUVERT:
      jj_consume_token(P_OUVERT);
      facutatif = jj_consume_token(ID);
      jj_consume_token(P_FERME);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    jj_consume_token(FLECHE);
         sortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
         liste = new TreeMap<Integer,Integer>();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASHTAG:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      liste = ENTRE_SORTIE(port);
           sortie.put(port,liste);
    }
    jj_consume_token(P_FERME);
         {if (true) return compo;}
    throw new Error("Missing return statement in function");
  }

/**"<".NUM."|".TYPE."(".NUM.",".NUM.")"."[".SORTIE_ENTRE.COMPOSANT."]".[ID]."->".SORTIE_ENTRE.">"*/
  final public $Composant COMPOSITE(int indice,String type,TreeMap <Integer,TreeMap<Integer,Integer>> connexionSortie) throws ParseException, Exception {
        int nb_sorties;
        int nb_entrees;
        int indiceCompo;
        int numPort;
        int i;

        String type;
        String facultatif;

        Composite compo;
        $Composant c;

        TreeMap <Integer,Integer> liste;
        TreeMap <Integer,TreeMap<Integer,Integer>> connexionEntre;
        TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> listeConnexion;
         liste = new TreeMap <Integer,Integer>();
        connexionEntre = new TreeMap <Integer,TreeMap<Integer,Integer>>();
        connexionSortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
        listeConnexion = new TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>>();
    jj_consume_token(P_OUVERT);
    indice = Nombre();
    jj_consume_token(SEPARATEUR);
    type = jj_consume_token(ID);
    jj_consume_token(P_OUVERT);
    nb_entrees = Nombre();
    jj_consume_token(SEPARATEUR);
    nb_sorties = Nombre();
    jj_consume_token(P_FERME);
         compo = new Composite(nb_entrees,nb_sorties,type);
    jj_consume_token(P_OUVERT);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASHTAG:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      liste = ENTRE_SORTIE(numPort);
         connexionEntre.put(numPort,liste);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATEUR:
        jj_consume_token(SEPARATEUR);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case P_OUVERT:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      if (jj_2_2(3)) {
        c = COMPOSANT(indiceCompo, connexionSortie);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case P_OUVERT:
          c = COMPOSITE(indiceCompo,type,connexionSortie);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
          listeConnexion.put(indiceCompo,connexionSortie);compo.add(c,indiceCompo);
    }
    jj_consume_token(P_FERME);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case P_OUVERT:
      jj_consume_token(P_OUVERT);
      facutatif = jj_consume_token(ID);
      jj_consume_token(P_FERME);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(FLECHE);
         connexionSortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HASHTAG:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      liste = ENTRE_SORTIE(numPort);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEPARATEUR:
        jj_consume_token(SEPARATEUR);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
         connexionSortie.put(numPort,liste);
    }
    jj_consume_token(P_FERME);
                //Connecter les port d'entr√©es
                for(i = 0; i <nb_entrees; i++)
                {
                        for(Map.Entry<Integer,Integer> entry : connexionEntre.get(i))
                        {
                                compo.accederPortSortie(i).add(compo.getCompo(entry.getKey()).accederPortSortie(entry.getValue()));
                        }
                }
                //Lier les coposant entre eux
                //Pour chaque composant
                for(i = 0; i <listeConnexion.size(); i++)
                {
                        //Obtenir liste des connexion sortie
                        connexionSortie = listeConnexion.get(i);

                        //Pour chaque port de sortie
                        for(Map.Entry<Interger,TreeMap<Integer,Integer>> entry : connexionSortie.entrySet())
                        {
                                //entry.getKey() = numPort de sortie
                                for(Map.Entry<Integer,Integer> entry2 : entry.getValue().entrySet())
                                { //entry2.getKey() = compoENtre, entry2.getValues() = portEntre

                                  if(entry2.getKey() == -1)//Connexion sortie
                                  { (compo.getCompo(i).accederPortSortie(entry.getKey())).add(compo.getPortSortie(entry2.getValues())); }
                                  //Connexion normale
                                  else { compo.connecter(i,entry.getKey(),entry2.getKey(),entry2.getValues()); }
                                }
                        }
                }
                {if (true) return compo;}
    throw new Error("Missing return statement in function");
  }

  final public TreeMap<Interger,Interger> ENTRE_SORTIE(int port) throws ParseException, Exception {
  TreeMap<Integer, Integer> listeCo;
  int numCompo2;
  int port2;
     listeCo = new TreeMap<Integer,Integer>();
    jj_consume_token(HASHTAG);
    port = Nombre();
    jj_consume_token(P_OUVERT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case HASHTAG:
      label_6:
      while (true) {
        jj_consume_token(HASHTAG);
        port2 = Nombre();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATEUR:
          jj_consume_token(SEPARATEUR);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
                 listeCo.put(-1,port2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HASHTAG:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
      }
      break;
    case NUM:
      label_7:
      while (true) {
        numCompo2 = Nombre();
        jj_consume_token(HASHTAG);
        port2 = Nombre();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEPARATEUR:
          jj_consume_token(SEPARATEUR);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
                 listeCo.put(numCompo2,port2);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_7;
        }
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(P_FERME);
         {if (true) return listeCo;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_scan_token(P_OUVERT)) return true;
    if (jj_3R_9()) return true;
    if (jj_scan_token(SEPARATEUR)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,0x200,0x200,0x2000,0x2000,0x1000,0x200,0x200,0x200,0x2000,0x1000,0x1000,0x2000,0x1000,0x20,0x2020,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Reader(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Reader(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Reader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Reader(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

        }
