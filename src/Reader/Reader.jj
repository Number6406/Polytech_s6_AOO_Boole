/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

/**
CIRCUIT : ID."[".(COMPOSANT | COMPOSITE)*."]"
ELEMENT : 
COMPOSANT : "<".NUM."|".TYPE."(".NUM.",".NUM.")".[ID]."->".(SORTIE_ENTRE)*">" 
COMPOSITE : "<".NUM."|".TYPE."(".NUM.",".NUM.")"."[".(SORTIE_ENTRE)*.(COMPOSANT)*."]".[ID]."->".(SORTIE_ENTRE)*.">"
SORTIE_ENTRE :"#".NUM."(".(NUM"#".NUM.[","].")"*)|"#".NUM."(".("#".NUM.[","].")"*)
*/

options{STATIC=false;}

PARSER_BEGIN(Reader)
	package Reader;
	import java.util.TreeMap;
	import java.util.Map;
	import Circuit.*;
	import Composant.*;
	import Composite.*;
	import BaseComposite.*;
	public class Reader {
		public _Circuit read(String s) throws Exception
		{ return CIRCUIT();}
		public TreeMap<String,Composite> readComposite() throws Exception { 			
		  	return LISTECOMPOSITE();}
	}
PARSER_END(Reader)

SKIP :{" " |"\r" | "\t" | "\n"}
TOKEN :
{
	<NUM:( <DIGIT> )+ >
	| <ID: <LETTER> (<DIGIT> | <LETTER>)+>
	| <#LETTER: ["a"-"z","A"-"Z"] >
	| <#DIGIT: ["0" - "9"] >
}

TOKEN :
{
  	<P_OUVERT : "<"|"("|"{" >
 	|<C_OUVERT : "[" >
 	|<C_FERME : "]">
	|<P_FERME : ">"|")"|"]"|"}" >
	|<FLECHE : "->" >
	|<SEPARATEUR : ","|"|" >
	|<HASHTAG : "#" >
}

int Nombre() throws Exception:
{
  Token t;
}
{	t = <NUM> 
	{return  Integer.parseInt(t.image);}
}

String Nom() throws Exception:
{
  Token t;
}
{	t = <ID> 
	{return  t.image;}
}

$Composant TYPE(String type) throws Exception:
{
  $Composant composant = null;
}
{
 	{
 	  	switch (type)
 	  	{
 	  	  	case "Itr" : composant = ($Composant)new Itr();break;
			case "Gnd" : composant = ($Composant)new Gnd();break;
 	  		case "Vcc" : composant = ($Composant)new Vcc();break;
 	  		case "Led" : composant = ($Composant)new Led();break;
 	  		case "Et" : composant = ($Composant)new Et();break;
 	  		case "Ou" : composant = ($Composant)new Ou();break;
 	  		case "Non" : composant = ($Composant)new Non();break;
 	  		case "Oux" : composant = ($Composant)new Oux();break;
 	 	}
 	 	return composant;
	}
}

/**Fonction de création du circuit*/
_Circuit CIRCUIT() throws Exception:
{ 
	$Composant compo;
	Circuit circuit = new Circuit();
	int i;
	TreeMap <Integer,TreeMap<Integer,Integer>> sortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
	TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> listeConnexion = new TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>>();
	String type = "";
}
{

		<ID>
		<C_OUVERT>
		(
			(LOOKAHEAD(10)
		  	compo = COMPOSANT(listeConnexion)|compo = COMPOSITE(listeConnexion)
		  	)
		  	{circuit.ajouter(compo,compo.getNum());}
		)*
		<C_FERME>

		/**Lien du composite*/
		{
			//Lier les coposant entre eux
			//Pour chaque composant
			for(i = 1; i <listeConnexion.size(); i++)
			{
				//Obtenir liste des connexion sortie
				sortie = listeConnexion.get(i);
				//Pour chaque port de sortie
				for(Map.Entry<Integer,TreeMap<Integer,Integer>> entry : sortie.entrySet())
			  	{
					//entry.getKey() = numPort de sortie
			  	  	for(Map.Entry<Integer,Integer> entry2 : entry.getValue().entrySet())
			  		{ //entry2.getKey() = compoENtre, entry2.getValues() = portEntre		  		
					  	circuit.connecter(i,entry.getKey(),entry2.getKey(),entry2.getValue()); 
			  		}
			  	}
			}
			return circuit;
		}		
}

/**Fonction de création du composant*/
$Composant COMPOSANT(TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> co) throws Exception:
{
  	int nb_sorties;
	int nb_entrees;
	int port;
	int indice;
	String facultatif;
	String type;
	TreeMap <Integer,TreeMap<Integer,Integer>> sortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
	
	$Composant compo;
}
{	
	/**Indice*/
	<P_OUVERT>  
	indice = Nombre()
	/**type*/
	<SEPARATEUR>
	type = Nom()
    compo = TYPE(type)
	{compo.ajouterNum(indice);}
	
    /**Lire nombre entrée et sortie*/
	<P_OUVERT> 
	nb_entrees = Nombre()
	<SEPARATEUR> 
	nb_sorties = Nombre()
	<P_FERME> 

	/**Lire élément facultatif*/
	(<P_OUVERT> 
	facultatif = Nom()
	<P_FERME>)?
	(<FLECHE>)?
	 
	/**Les sorties*/
	(
	  ENTRE_SORTIE(sortie)
	)*
	<P_FERME>
	{co.put(indice,sortie);return compo;}
}




/**"<".NUM."|".TYPE."(".NUM.",".NUM.")"."[".SORTIE_ENTRE.COMPOSANT."]".[ID]."->".SORTIE_ENTRE.">"*/
/**Fonction de création du Composite*/
$Composant COMPOSITE(TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> co) throws Exception:
{
  	int nb_sorties;
	int nb_entrees;
	int indiceCompo = 0;
	int numPort = 0;
	int i;
	int indice;
	String facultatif;
	String type;
	Composite compo;
	$Composant c;
	
	TreeMap <Integer,TreeMap<Integer,Integer>> s = new TreeMap <Integer,TreeMap<Integer,Integer>>();
	TreeMap <Integer,TreeMap<Integer,Integer>> connexionSortie = new TreeMap <Integer,TreeMap<Integer,Integer>>();
	TreeMap <Integer,TreeMap<Integer,Integer>> connexionEntre = new TreeMap <Integer,TreeMap<Integer,Integer>>();
	TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> listeConnexion = new TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>>();
}
{

	
	/**Indice*/
	<P_OUVERT>  
	indice = Nombre()
	
	/**type*/
	<SEPARATEUR> 
    type = Nom()

	/**Lire nombre entrées et un nombre de sorie*/
	<P_OUVERT> 
	nb_entrees = Nombre()
	<SEPARATEUR> 
	nb_sorties = Nombre()
	<P_FERME>
	
	//Creer Composite
	{
	  	compo = new Composite(nb_entrees,nb_sorties,type);
		compo.ajouterNum(indice);
	}
	
	/**Liste des entrées*/
	<C_OUVERT>

	(ENTRE_SORTIE(connexionEntre)
  	[<SEPARATEUR>])*

	/**Liste des composants*/
	((LOOKAHEAD(10) c = COMPOSANT(listeConnexion) | c = COMPOSITE(listeConnexion))
  	{compo.ajouter(c,c.getNum());})*
	  	
	<C_FERME>
	/**Lire un éléments facltatif*/
	(<P_OUVERT> 
	facultatif = Nom()
	<P_FERME>)*
	
	(<FLECHE>)*
	/**Liste des sorties*/
  	(ENTRE_SORTIE(connexionSortie)[<SEPARATEUR>]
  	)*
	<P_FERME>
	
	/**Lien du composite*/
	{
		//Connecter les port d'entrées
		for(i = 1; i < nb_entrees+1; i++)
		{
			for(Map.Entry<Integer,Integer> entry : connexionEntre.get(i).entrySet())
	  		{ 				
				compo.connecterEntre(i,entry.getKey(),entry.getValue());
	  		}
		}
		//Lier les coposant entre eux
		//Pour chaque composant
		for(i = 1; i <listeConnexion.size()+1; i++)
		{
			//Obtenir liste des connexion sortie
			s = listeConnexion.get(i);
			
			//Pour chaque port de sortie
			for(Map.Entry<Integer,TreeMap<Integer,Integer>> entry : s.entrySet())
		  	{
				//entry.getKey() = numPort de sortie
		  	  	for(Map.Entry<Integer,Integer> entry2 : entry.getValue().entrySet())
		  		{ //entry2.getKey() = compoENtre, entry2.getValues() = portEntre

		  		  if(entry2.getKey() == -1)//Connexion sortie
		  		  { compo.connecterSortie(i,entry.getKey(),entry2.getValue()); }
		  		  //Connexion normale
				  else {compo.connecter(i,entry.getKey(),entry2.getKey(),entry2.getValue()); }
		  		}
		  	}
		}
		co.put(compo.getNum(),connexionSortie);
		return compo;
	}
}
/**Lire les sortie d'un composant ou d'un composite, Association #port(numCompo2#port2...),...*/
void ENTRE_SORTIE(TreeMap <Integer,TreeMap<Integer,Integer>> listeCo) throws Exception:
{
  int numCompo2;
  int port2;
  int port;
  TreeMap <Integer,Integer> liste = new TreeMap <Integer,Integer>();
}
{
	<HASHTAG>
	port = Nombre()

	<P_OUVERT>
	(
		(<HASHTAG>
		port2 = Nombre()
		[<SEPARATEUR>]
		{liste.put(-1,port2);})+
		| 
		(numCompo2 = Nombre()
		<HASHTAG>
		port2 = Nombre()
		[<SEPARATEUR>]
		{liste.put(numCompo2,port2);})+
	)
	<P_FERME>
	{listeCo.put(port,liste);}
}
/**Lire une liste de composite*/
TreeMap<String,Composite> LISTECOMPOSITE() throws Exception:
{
  	String nom;
	TreeMap<String,Composite> listeComposant = new TreeMap<String,Composite>(); 
	$Composant compo;
	TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>> co = new TreeMap <Integer,TreeMap<Integer,TreeMap<Integer,Integer>>>(); 

}
{
	(compo = COMPOSITE(co)
	{listeComposant.put(compo.obtenirType(),((Composite) compo));})*
	{return listeComposant;}
}